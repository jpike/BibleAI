---
description: 
globs: 
alwaysApply: true
---
# Conditional Boolean Variables Coding Standard

## Overview
This project follows a coding standard where complex expressions in `if` statements should be replaced with well-named local boolean variables that capture the meaning of the condition. This improves code readability, debugging, and maintainability.

## The Problem
Complex expressions directly in conditional statements can make code harder to understand and debug:

```python
# ‚ùå Hard to read and debug
if not Path(data_directory_path).exists():
    print("Directory not found")

if not self.BibleParser or not self.LlmClient:
    print("Components not initialized")

if user_input.lower() in ['quit', 'exit', 'q']:
    print("Goodbye")
```

## The Solution
Extract complex expressions into well-named boolean variables:

```python
# ‚úÖ Clear, readable, and debuggable
data_directory_exists = Path(data_directory_path).exists()
if not data_directory_exists:
    print("Directory not found")

components_initialized = self.BibleParser is not None and self.LlmClient is not None
if not components_initialized:
    print("Components not initialized")

user_input_lower = user_input.lower()
is_quit_command = user_input_lower in ['quit', 'exit', 'q']
if is_quit_command:
    print("Goodbye")
```

## Naming Conventions

### Boolean Variable Names
Use descriptive names that clearly indicate what condition is being checked:

```python
# ‚úÖ Good examples
file_exists = file_path.exists()
user_is_authenticated = user.auth_token is not None
data_is_valid = data is not None and len(data) > 0
connection_successful = self.client.TestConnection()
is_admin_user = user.role == 'admin'
has_permission = user.can_access(resource)

# ‚ùå Poor examples
exists = file_path.exists()
auth = user.auth_token is not None
valid = data is not None and len(data) > 0
test = self.client.TestConnection()
admin = user.role == 'admin'
perm = user.can_access(resource)
```

### Common Patterns

#### File and Path Operations
```python
# File existence checks
file_exists = file_path.exists()
directory_exists = Path(data_directory_path).exists()
file_is_readable = file_path.is_file() and os.access(file_path, os.R_OK)

# Path validation
path_is_valid = path is not None and len(str(path).strip()) > 0
is_absolute_path = Path(path).is_absolute()
```

#### Object State Checks
```python
# Component initialization
components_initialized = self.BibleParser is not None and self.LlmClient is not None
parser_available = self.BibleParser is not None
client_connected = self.LlmClient is not None

# Object validation
object_is_valid = obj is not None and hasattr(obj, 'required_method')
data_is_loaded = self.data is not None and len(self.data) > 0
```

#### User Input Validation
```python
# Command parsing
user_input_lower = user_input.lower()
is_quit_command = user_input_lower in ['quit', 'exit', 'q']
is_help_command = user_input_lower == 'help'
is_valid_command = command in ['research', 'crossref', 'guide', 'search']

# Input validation
input_is_empty = not user_input.strip()
input_is_valid = len(user_input) > 0 and len(user_input) <= MAX_LENGTH
```

#### API and Network Operations
```python
# Connection tests
connection_successful = self.LlmClient.TestConnection()
api_available = response_data is not None
request_succeeded = response.status_code == 200

# Response validation
response_is_valid = response_data and 'choices' in response_data
data_contains_results = 'results' in response_data and len(response_data['results']) > 0
```

## Implementation Guidelines

### When to Apply This Standard
Apply this standard when the conditional expression:
- Contains method calls (e.g., `file_path.exists()`)
- Has multiple conditions joined by `and`/`or`
- Uses complex comparisons or operations
- Would benefit from clearer intent

### When NOT to Apply
Simple conditions that are already clear:
```python
# ‚úÖ These are fine as-is
if not args:
    return

if response.success:
    print("Success")

if count > 0:
    process_items()
```

### Variable Placement
Place the boolean variable immediately before the conditional statement:

```python
# ‚úÖ Good placement
file_exists = file_path.exists()
if not file_exists:
    raise FileNotFoundError(f"File not found: {file_path}")

# ‚ùå Poor placement (too far from usage)
file_exists = file_path.exists()
# ... many lines of code ...
if not file_exists:
    raise FileNotFoundError(f"File not found: {file_path}")
```

## Examples from the Codebase

### [Main.py](mdc:src/Main.py)
```python
# LLM connection test
llm_connection_successful = self.LlmClient.TestConnection()
if llm_connection_successful:
    print("‚úì LLM connection successful")

# Component initialization check
components_initialized = self.BibleParser is not None and self.LlmClient is not None
if not components_initialized:
    print("Application not properly initialized. Exiting.")

# User command parsing
user_input_lower = user_input.lower()
is_quit_command = user_input_lower in ['quit', 'exit', 'q']
if is_quit_command:
    print("Goodbye! üôè")
```

### [BibleParser.py](mdc:src/BibleParser.py)
```python
# File existence check
file_exists = file_path.exists()
if not file_exists:
    raise FileNotFoundError(f"Translation file not found: {file_path}")

# Verse data validation
osis_id_valid = bool(osis_id)
text_valid = bool(text.strip())
verse_data_valid = osis_id_valid and text_valid
if not verse_data_valid:
    continue

# File type check
is_xml_filename = trans_name.endswith('.xml')
if is_xml_filename:
    translation_filename = trans_name
```

## Benefits

1. **Improved Readability**: Code intent is immediately clear
2. **Better Debugging**: Can inspect boolean variables during debugging
3. **Enhanced Maintainability**: Easier to modify conditions without breaking logic
4. **Self-Documenting**: Variable names serve as inline documentation
5. **Reduced Cognitive Load**: Developers don't need to parse complex expressions

## Migration Guidelines

When updating existing code:
1. Identify complex conditional expressions
2. Extract the expression into a well-named boolean variable
3. Replace the original condition with the variable
4. Test to ensure functionality is preserved
5. Update any related comments or documentation

## Tools and Validation

- Use static analysis tools to identify complex conditionals
- Review code during pull requests for adherence to this standard
- Consider adding linting rules to enforce this pattern
- Include this standard in code review checklists

